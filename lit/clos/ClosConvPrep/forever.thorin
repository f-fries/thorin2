.import mem;
.import core;

.let i32 = %Int 4294967296;
.let i8 = %Int 256;
.let M = %mem.M;

.let ADD = %core.wrap.add (0, 4294967296);
.let MUL = %core.wrap.mul (0, 4294967296);
.let EQ = %core.icmp.e 4294967296;
.let LT = %core.icmp.sl 4294967296;

.cn printInteger [mem: %mem.M, val: i32, return : .Cn [%mem.M]];
.cn exit [mem: M, code: i32, return: .Cn [%mem.M]];

.cn loop_head [mem: M, i:i32, n:i32] = {
    .cn body [mem: M] = {
        .cn print_cont [mem: M] = {
            loop_head (mem, ADD (i, 1:i32), n)
        };
        printInteger(mem, i, print_cont)
    };

    .cn break [mem: M] = {
        exit (mem, 0:i32, ⊥:.Cn[M])
    };

    .let i = LT (i, n);
    (body, break)#i mem
};

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    loop_head (mem, 0:i32, argc)
};
