.import mem;
.import core;
.import direct;

.let i32 = %Int 4294967296;
.let i8 = %Int 256;
.let M = %mem.M;
.let I2I = .Cn [M, i32, .Cn[M, i32]];
.let ADD = %core.wrap.add (0, 4294967296);

.cn h [M, I2I, .Cn [M, i32]];

.cn .extern main [mem: %mem.M, argc: i32, argv : %mem.Ptr («⊤:.Nat; %mem.Ptr («⊤:.Nat; %Int 256», 0:.Nat)», 0:.Nat), return : .Cn [%mem.M, i32]] = {
    .cn f [mem: M, x: i32, ret: .Cn[M, i32]] = {
        ret (mem, ADD (x, argc))
    };
    h(mem, f, return)
};
